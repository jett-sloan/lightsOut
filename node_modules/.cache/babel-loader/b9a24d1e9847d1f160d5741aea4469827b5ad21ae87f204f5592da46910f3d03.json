{"ast":null,"code":"var _jsxFileName = \"/home/jettsloan/code/react/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.25\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const boardCopy = oldBoard.map(row => [...row]);\n      const flipCell = (y, x) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      flipCell(y, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      return boardCopy;\n    });\n  }\n  if (hasWon()) {\n    alert(\"You Won\");\n  }\n  const makeTable = () => {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, x) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(Cell, {\n              flipCellsAroundMe: flipCellsAround,\n              isLit: cell,\n              coord: `${y}-${x}`\n            }, `${y}-${x}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 19\n            }, this)\n          }, `${y}-${x}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this))\n        }, y, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: makeTable()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 10\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","row","j","push","Math","random","hasWon","every","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","boardCopy","flipCell","alert","makeTable","className","children","flipCellsAroundMe","isLit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jettsloan/code/react/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const boardCopy = oldBoard.map(row => [...row]);\n      const flipCell = (y, x) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      flipCell(y, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      return boardCopy;\n    });\n  }\n\n  if (hasWon()) {\n    alert(\"You Won\");\n  }\n\n  const makeTable = () => {\n    return (\n      <table className=\"game\">\n        <tbody>\n          {board.map((row, y) => (\n            <tr key={y}>\n              {row.map((cell, x) => (\n                <td key={`${y}-${x}`}>\n                  <Cell\n                    key={`${y}-${x}`}\n                    flipCellsAroundMe={flipCellsAround}\n                    isLit={cell}\n                    coord={`${y}-${x}`}\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  return <div>{makeTable()}</div>;\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}