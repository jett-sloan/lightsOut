{"ast":null,"code":"import React,{useState}from\"react\";import Cell from\"./Cell\";import\"./Board.css\";//import { getTreeDiff } from \"@testing-library/user-event/dist/cjs/utils/index.js\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/import{jsx as _jsx}from\"react/jsx-runtime\";function Board(_ref){let{nrows,ncols,chanceLightStartsOn}=_ref;const[board,setBoard]=useState(createBoard());/** create a board nrows high/ncols wide, each cell randomly lit or unlit */function createBoard(){let initialBoard=[];for(let i=0;i<nrows;i++){let row=[];for(let j=0;j<ncols;j++){row.push(Math.random()<chanceLightStartsOn);}initialBoard.push.row();}// TODO: create array-of-arrays of true/false values\nreturn initialBoard;}//  function hasWon() {\n//    // TODO: check the board in state to determine whether the player has won.\n//    if (board.every(row => row.every(cell => !cell)))\n//      return true\n//    else\n//      return false\n//  }\nfunction flipCellsAround(coord){setBoard(oldBoard=>{const[y,x]=coord.split(\"-\").map(Number);const flipCell=(y,x,boardCopy)=>{// if this coord is actually on board, flip it\nif(x>=0&&x<ncols&&y>=0&&y<nrows){boardCopy[y][x]=!boardCopy[y][x];}};// TODO: Make a (deep) copy of the oldBoard\nconst boardCopy=oldBoard.map(row=>[...row]);// TODO: in the copy, flip this cell and the cells around it\nflipCell(y,x,boardCopy);flipCell(y,x-1,boardCopy);flipCell(y,x+1,boardCopy);flipCell(y-1,x,boardCopy);flipCell(y+2,x,boardCopy);// TODO: return the copy\nreturn boardCopy;});}// if the game is won, just show a winning msg & render nothing else\n//if (hasWon()) {\n//  alert('You Won')\n//}\n// TODO\n// make table board\nconst makeTable=()=>{return/*#__PURE__*/_jsx(\"table\",{className:\"game\",children:/*#__PURE__*/_jsx(\"tbody\",{children:board.map((row,y)=>/*#__PURE__*/_jsx(\"tr\",{children:row.map((cell,x)=>/*#__PURE__*/_jsx(\"td\",{children:Cell(flipCellsAround,cell)}))},y))})});};return/*#__PURE__*/_jsx(\"div\",{children:makeTable()});// TODO\n}export default Board;","map":{"version":3,"names":["React","useState","Cell","jsx","_jsx","Board","_ref","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","i","row","j","push","Math","random","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","makeTable","className","children","cell"],"sources":["/home/jettsloan/code/react/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n//import { getTreeDiff } from \"@testing-library/user-event/dist/cjs/utils/index.js\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let row = []\n\n      for (let j = 0; j < ncols; j++) {\n        row.push(Math.random() < chanceLightStartsOn)\n\n      }\n      initialBoard.push.row()\n    }\n\n\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n//  function hasWon() {\n//    // TODO: check the board in state to determine whether the player has won.\n//    if (board.every(row => row.every(cell => !cell)))\n//      return true\n//    else\n//      return false\n//  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy)\n      flipCell(y, x - 1, boardCopy)\n      flipCell(y, x + 1, boardCopy)\n      flipCell(y - 1, x, boardCopy)\n      flipCell(y + 2, x, boardCopy)\n      // TODO: return the copy\n      return boardCopy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  //if (hasWon()) {\n  //  alert('You Won')\n  //}\n  // TODO\n\n  // make table board\n  const makeTable = () => {\n    return (\n      <table className=\"game\">\n        <tbody>\n          {board.map((row, y) =>\n            <tr key={y}>\n              {row.map((cell, x) =>\n                <td>{Cell(flipCellsAround,cell)}</td>\n              )}\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (<div>{makeTable()}</div>)\n  // TODO\n}\n\nexport default Board;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,IAAI,KAAM,QAAQ,CACzB,MAAO,aAAa,CACpB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAvBA,OAAAC,GAAA,IAAAC,IAAA,yBAyBA,QAAS,CAAAC,KAAKA,CAAAC,IAAA,CAAwC,IAAvC,CAAEC,KAAK,CAAEC,KAAK,CAAEC,mBAAoB,CAAC,CAAAH,IAAA,CAClD,KAAM,CAACI,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAACW,WAAW,CAAC,CAAC,CAAC,CAEjD,4EACA,QAAS,CAAAA,WAAWA,CAAA,CAAG,CACrB,GAAI,CAAAC,YAAY,CAAG,EAAE,CACrB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGP,KAAK,CAAEO,CAAC,EAAE,CAAE,CAC9B,GAAI,CAAAC,GAAG,CAAG,EAAE,CAEZ,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGR,KAAK,CAAEQ,CAAC,EAAE,CAAE,CAC9BD,GAAG,CAACE,IAAI,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGV,mBAAmB,CAAC,CAE/C,CACAI,YAAY,CAACI,IAAI,CAACF,GAAG,CAAC,CAAC,CACzB,CAGA;AACA,MAAO,CAAAF,YAAY,CACrB,CAEF;AACA;AACA;AACA;AACA;AACA;AACA;AAEE,QAAS,CAAAO,eAAeA,CAACC,KAAK,CAAE,CAC9BV,QAAQ,CAACW,QAAQ,EAAI,CACnB,KAAM,CAACC,CAAC,CAAEC,CAAC,CAAC,CAAGH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC,CAE3C,KAAM,CAAAC,QAAQ,CAAGA,CAACL,CAAC,CAAEC,CAAC,CAAEK,SAAS,GAAK,CACpC;AAEA,GAAIL,CAAC,EAAI,CAAC,EAAIA,CAAC,CAAGhB,KAAK,EAAIe,CAAC,EAAI,CAAC,EAAIA,CAAC,CAAGhB,KAAK,CAAE,CAC9CsB,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC,CAAG,CAACK,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC,CACpC,CACF,CAAC,CAED;AACA,KAAM,CAAAK,SAAS,CAAGP,QAAQ,CAACI,GAAG,CAACX,GAAG,EAAI,CAAC,GAAGA,GAAG,CAAC,CAAC,CAE/C;AACAa,QAAQ,CAACL,CAAC,CAAEC,CAAC,CAAEK,SAAS,CAAC,CACzBD,QAAQ,CAACL,CAAC,CAAEC,CAAC,CAAG,CAAC,CAAEK,SAAS,CAAC,CAC7BD,QAAQ,CAACL,CAAC,CAAEC,CAAC,CAAG,CAAC,CAAEK,SAAS,CAAC,CAC7BD,QAAQ,CAACL,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAEK,SAAS,CAAC,CAC7BD,QAAQ,CAACL,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAEK,SAAS,CAAC,CAC7B;AACA,MAAO,CAAAA,SAAS,CAClB,CAAC,CAAC,CACJ,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACtB,mBACE1B,IAAA,UAAO2B,SAAS,CAAC,MAAM,CAAAC,QAAA,cACrB5B,IAAA,UAAA4B,QAAA,CACGtB,KAAK,CAACgB,GAAG,CAAC,CAACX,GAAG,CAAEQ,CAAC,gBAChBnB,IAAA,OAAA4B,QAAA,CACGjB,GAAG,CAACW,GAAG,CAAC,CAACO,IAAI,CAAET,CAAC,gBACfpB,IAAA,OAAA4B,QAAA,CAAK9B,IAAI,CAACkB,eAAe,CAACa,IAAI,CAAC,CAAK,CACtC,CAAC,EAHMV,CAIL,CACN,CAAC,CACI,CAAC,CACH,CAAC,CAEZ,CAAC,CAED,mBAAQnB,IAAA,QAAA4B,QAAA,CAAMF,SAAS,CAAC,CAAC,CAAM,CAAC,CAChC;AACF,CAEA,cAAe,CAAAzB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}