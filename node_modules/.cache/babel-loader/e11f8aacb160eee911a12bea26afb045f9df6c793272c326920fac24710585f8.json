{"ast":null,"code":"var _jsxFileName = \"/home/jettsloan/code/react/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n//import { getTreeDiff } from \"@testing-library/user-event/dist/cjs/utils/index.js\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push.row();\n    }\n\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  //  function hasWon() {\n  //    // TODO: check the board in state to determine whether the player has won.\n  //    if (board.every(row => row.every(cell => !cell)))\n  //      return true\n  //    else\n  //      return false\n  //  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 2, x, boardCopy);\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  //if (hasWon()) {\n  //  alert('You Won')\n  //}\n  // TODO\n\n  // make table board\n  const makeTable = () => {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, x) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: Cell(flipCellsAround, cell)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this))\n        }, y, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: makeTable()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 11\n  }, this);\n  // TODO\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","row","j","push","Math","random","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","makeTable","className","children","cell","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jettsloan/code/react/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n//import { getTreeDiff } from \"@testing-library/user-event/dist/cjs/utils/index.js\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let row = []\n\n      for (let j = 0; j < ncols; j++) {\n        row.push(Math.random() < chanceLightStartsOn)\n\n      }\n      initialBoard.push.row()\n    }\n\n\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n//  function hasWon() {\n//    // TODO: check the board in state to determine whether the player has won.\n//    if (board.every(row => row.every(cell => !cell)))\n//      return true\n//    else\n//      return false\n//  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy)\n      flipCell(y, x - 1, boardCopy)\n      flipCell(y, x + 1, boardCopy)\n      flipCell(y - 1, x, boardCopy)\n      flipCell(y + 2, x, boardCopy)\n      // TODO: return the copy\n      return boardCopy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  //if (hasWon()) {\n  //  alert('You Won')\n  //}\n  // TODO\n\n  // make table board\n  const makeTable = () => {\n    return (\n      <table className=\"game\">\n        <tbody>\n          {board.map((row, y) =>\n            <tr key={y}>\n              {row.map((cell, x) =>\n                <td>{Cell(flipCellsAround,cell)}</td>\n              )}\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (<div>{makeTable()}</div>)\n  // TODO\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}