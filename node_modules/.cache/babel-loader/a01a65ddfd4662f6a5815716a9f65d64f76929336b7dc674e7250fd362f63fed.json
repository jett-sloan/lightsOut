{"ast":null,"code":"import React,{useState}from\"react\";import Cell from\"./Cell\";import\"./Board.css\";/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/function Board(_ref){let{nrows,ncols,chanceLightStartsOn}=_ref;const[board,setBoard]=useState(createBoard());/** create a board nrows high/ncols wide, each cell randomly lit or unlit */function createBoard(){let initialBoard=[];// TODO: create array-of-arrays of true/false values\nreturn initialBoard;}function hasWon(){// TODO: check the board in state to determine whether the player has won.\n}function flipCellsAround(coord){setBoard(oldBoard=>{const[y,x]=coord.split(\"-\").map(Number);const flipCell=(y,x,boardCopy)=>{// if this coord is actually on board, flip it\nif(x>=0&&x<ncols&&y>=0&&y<nrows){boardCopy[y][x]=!boardCopy[y][x];}};// TODO: Make a (deep) copy of the oldBoard\n// TODO: in the copy, flip this cell and the cells around it\n// TODO: return the copy\n});}// if the game is won, just show a winning msg & render nothing else\n// TODO\n// make table board\n// TODO\n}export default Board;","map":{"version":3,"names":["React","useState","Cell","Board","_ref","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","hasWon","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy"],"sources":["/home/jettsloan/code/react/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,IAAI,KAAM,QAAQ,CACzB,MAAO,aAAa,CAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAEA,QAAS,CAAAC,KAAKA,CAAAC,IAAA,CAAwC,IAAvC,CAAEC,KAAK,CAAEC,KAAK,CAAEC,mBAAoB,CAAC,CAAAH,IAAA,CAClD,KAAM,CAACI,KAAK,CAAEC,QAAQ,CAAC,CAAGR,QAAQ,CAACS,WAAW,CAAC,CAAC,CAAC,CAEjD,4EACA,QAAS,CAAAA,WAAWA,CAAA,CAAG,CACrB,GAAI,CAAAC,YAAY,CAAG,EAAE,CACrB;AACA,MAAO,CAAAA,YAAY,CACrB,CAEA,QAAS,CAAAC,MAAMA,CAAA,CAAG,CAChB;AAAA,CAGF,QAAS,CAAAC,eAAeA,CAACC,KAAK,CAAE,CAC9BL,QAAQ,CAACM,QAAQ,EAAI,CACnB,KAAM,CAACC,CAAC,CAAEC,CAAC,CAAC,CAAGH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC,CAE3C,KAAM,CAAAC,QAAQ,CAAGA,CAACL,CAAC,CAAEC,CAAC,CAAEK,SAAS,GAAK,CACpC;AAEA,GAAIL,CAAC,EAAI,CAAC,EAAIA,CAAC,CAAGX,KAAK,EAAIU,CAAC,EAAI,CAAC,EAAIA,CAAC,CAAGX,KAAK,CAAE,CAC9CiB,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC,CAAG,CAACK,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC,CACpC,CACF,CAAC,CAED;AAEA;AAEA;AACF,CAAC,CAAC,CACJ,CAEA;AAEA;AAEA;AAEA;AACF,CAEA,cAAe,CAAAd,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}